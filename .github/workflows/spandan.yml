name: Spandan workflow

on:
  push:
    branches:
      - main
    paths:
      - gradle.properties

env:
  COMMIT_MESSAGE: |
    Update Baseline Profile

    Created by GitHub Action [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

    ACLOVERRIDE CODEOWNEROVERRIDE CUSTOMVALIDATIONSOVERRIDE

jobs:
  update-badge:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{  github.head_ref }}
          fetch-depth: 0

      - name: Get previous version
        id: get-previous-version
        run: |
          commit_hashes=$(git rev-list -n 2 origin/main -- gradle.properties)
          second_last_commit_hash=$(echo "$commit_hashes" | tail -n 1)
          commit_info=$(git show $second_last_commit_hash:gradle.properties)
          echo "$commit_info"
          previous_version=$(echo "$commit_info" | grep '^VERSION_NAME=' | cut -d "=" -f2 | tr -d '[:space:]')
          previous_line=$(echo "$commit_info" | grep -n '^VERSION_NAME=' | cut -d ":" -f1)
          echo "prev-version: $previous_version"
          echo "prev-line: $previous_line"
          echo "prev_version=$previous_version" >> $GITHUB_ENV
          echo "prev_version_line=$previous_line" >> $GITHUB_ENV

      - name: Get current version
        id: get-current-version
        run: |
          echo "prev-version: ${{ env.previous_version }}"
          echo "prev-line: ${{ env.previous_line }}"
          echo "current_version=$(grep '^VERSION_NAME=' gradle.properties | cut -d "=" -f2 | tr -d '[:space:]')" >> $GITHUB_ENV
          echo "current_version_line=$(grep -n '^VERSION_NAME=' gradle.properties | cut -d ":" -f1)" >> $GITHUB_ENV

      - name: Check for version change
        run: |
          if [ "${{ env.prev_version }}"  != "${{ env.current_version }}" ]; then
            echo "version_change=true" >> $GITHUB_ENV
          else
            echo "version_change=false" >> $GITHUB_ENV
          fi
      
          if [ "${{ env.prev_version_line }}" !=  "${{ env.current_version_line }}" ]; then
            echo "VERSION_LINE_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_LINE_CHANGED=false" >> $GITHUB_ENV
          fi
          
      - name: my-app-install token
        id: my-app
        if: |
          env.version_change == 'true' ||
          env.VERSION_LINE_CHANGED == 'true'
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: print app token
        if: |
          env.version_change == 'true' ||
          env.VERSION_LINE_CHANGED == 'true'
        run: |
          echo "APP_TOKEN=${{ steps.my-app.outputs.token }}" >> $GITHUB_ENV

      - name: my-app-install token
        id: my-alternate-app
        if: |
          env.version_change == 'true' ||
          env.VERSION_LINE_CHANGED == 'true'
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ALTERNATE_APP_ID }}
          private-key: ${{ secrets.ALTERNATE_APP_PRIVATE_KEY }}

      - name: print app token
        if: |
          env.version_change == 'true' ||
          env.VERSION_LINE_CHANGED == 'true'
        run: |
          echo "ALTERNATE_APP_TOKEN=${{ steps.my-alternate-app.outputs.token }}" >> $GITHUB_ENV


      - name: Update version in README Badge
        if: env.version_change == 'true'
        run: |
          version=$(grep '^VERSION_NAME=' gradle.properties | cut -d "=" -f2 | tr -d '[:space:]')
          version=$(echo "$version" | sed 's/-/%E2%80%90/g')
          echo "$version"
          sed -i "s/\(badge\/version-v.*-blue\.svg\)/badge\/version-v$version-blue.svg/" README.md
          cat README.md

      - name: Update line number in README Badge
        if: env.VERSION_LINE_CHANGED == 'true'
        run: |
          current_line=$(grep -n '^VERSION_NAME=' gradle.properties | cut -d ":" -f1)
          echo "$current_line"
          sed -i "s/properties#L[0-9]*)/properties#L$current_line\)/" README.md
          cat README.md

      - name: Create PR
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          base: main
          branch: github-actions/readme-update
          delete-branch: true
          author: ${{ github.actor }} <${{ github.actor }}@linkedin.com>
          title: 'Update readme'
          body: ${{ env.COMMIT_MESSAGE }}
          commit-message: ${{ env.COMMIT_MESSAGE }}
          token: ${{ env.APP_TOKEN }}
          add-paths: README.md
            
      - name: pr number
        run: | 
          echo "pr number : ${{ steps.create-pr.outputs.pull-request-number }}"


      # - name: Create, Approve and Merge PR
      #   uses: ./.github/actions/new_action
      #   with:
      #     title: 'custom title'
      #     commit-message: 'test commit message'
      #     app-id: ${{ secrets.ALTERNATE_APP_ID }}
      #     app-private-key: ${{ secrets.ALTERNATE_APP_PRIVATE_KEY }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     personal-access-token: ${{ secrets.ACCESS_TOKEN }}
      #     add-paths: README.md

      - name: Approve PR
        if: |
           env.version_change == 'true' ||
           env.VERSION_LINE_CHANGED == 'true'
        run: |
           gh pr review ${{ steps.create-pr.outputs.pull-request-number }} --approve
           echo "approved"
        env:
           GITHUB_TOKEN: ${{ env.ALTERNATE_APP_TOKEN }}

      - name: Turn On PR Auto-Merge
        id: auto-merge
        if: |
          env.version_change == 'true' ||
          env.VERSION_LINE_CHANGED == 'true'
        run: >
          gh pr merge --squash --auto --repo
          ${{ github.repository }} --delete-branch
          ${{ steps.create-pr.outputs.pull-request-number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print output of auto merge
        run: |
          echo "output: ${{ steps.auto-merge.outputs.success }}"

      - name: Wait for checks to complete
        if: ${{ steps.create-pr.outputs.pull-request-number }}
        run: |
          echo "pr number: ${{ steps.create-pr.outputs.pull-request-number }}"
          # Replace 'YOUR-ACCESS-TOKEN' with your actual GitHub access token
          ACCESS_TOKEN=${{ env.APP_TOKEN }}
          REPO_OWNER="hitesh-temp-account"
          REPO_NAME="Breach"
          pr_merged="false"
          # pr_merged=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/${{ steps.create-pr.outputs.pull-request-number }}" | jq -r '.merged')
          # echo "status: $pr_merged"
          timer=0

          while [[ "$pr_merged" != "true" && $timer -lt 9 ]]; do
            sleep 5
          
            # Get PR info
            PR=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/${{ steps.create-pr.outputs.pull-request-number }}")
            echo "pr: $PR"
            pr_merged=$(echo "$PR" | jq -r '.merged')
            echo "State of the PR: $pr_merged"
            timer=$((timer+5))
          done

          if [ "$pr_merged" == "true" ]; then
            echo "PR checks passed. Deleting branch."
            git push origin --delete github-actions/readme-update
          else
            echo "PR checks failed. Keeping the branch."
          fi

