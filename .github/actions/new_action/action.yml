# .github/actions/approve_and_merge/action.yml 
name: 'Approve and Merge PR'
description: 'Approves and merges a pull request'
inputs:
  title:
    description: 'title'
    required: true
  commit-message:
    description: 'commit message'
    required: true
  pr-creation-app-id:
    description: 'github app id for pr creation'
    required: true
  pr-creation-app-private-key:
    description: 'github app private keyfor pr creation'
    required: true
  pr-approval-app-id:
    description: 'github app id for pr approval'
    required: true
  pr-approval-app-private-key:
    description: 'github app private keyfor pr approval'
    required: true
  github-token:
    description: 'github token'
    required: true

defaults:
  run:
    shell: bash

runs:
  using: 'composite'
  steps:
    - name: my-app-install token for create Pr
      id: my-app-create
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ inputs.pr-creation-app-id }}
        private-key: ${{ inputs.pr-creation-app-private-key }}

    - name: my-app-install token for approve PR
      id: my-app-approve
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ inputs.pr-approval-app-id }}
        private-key: ${{ inputs.pr-approval-app-private-key }}

    - name: Set up Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "<${{ github.actor }}@linkedin.com>"
      shell: bash

    - name: Generate 8-digit random number
      if: env.check_changes == 'true'
      run: |
        echo "RANDOM_NUMBER=$(shuf -i 10000000-99999999 -n 1)" >> $GITHUB_ENV
      shell: bash

    - name: Display random number
      if: env.check_changes == 'true'
      run: |
        echo "Random Number: ${{ env.RANDOM_NUMBER }}"
      shell: bash

    - name: Create branch
      run: |
        git checkout -b new-feature-branch-${{ env.RANDOM_NUMBER }}
      shell: bash

      # Add your build/test steps here

    - name: Commit and push changes
      run: |
        git add README.md
        git commit -m "Auto-generated changes"
        git show
        git push origin new-feature-branch-${{ env.RANDOM_NUMBER }}
      shell: bash

    - name: Create Pull Request
      id: create_pr
      run: |
        pr_number=$(curl -X POST -H "Authorization: Bearer ${{ steps.my-app-create.outputs.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{"title":"${{ inputs.title }}","head":"new-feature-branch-${{ env.RANDOM_NUMBER }}","base":"main","body":"${{ inputs.commit-message }}"}' | jq -r '.number')

        echo "PR number: $pr_number"
        echo "PR_NUMBER=$pr_number" >> $GITHUB_ENV
      shell: bash
            
    - name: Approve PR
      if: ${{ env.PR_NUMBER }}
      run: |
        gh pr review ${{ env.PR_NUMBER }} --approve
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.my-app-approve.outputs.token }}

    # - name: Add Empty Commit to Auto-Created PR
    #   if: env.PR_NUMBER
    #   run: |
    #     # Checkout the branch associated with the PR
    #     git checkout feature-branch

    #     # Set user information for the empty commit
    #     git config user.name "hiteshkuberr"
    #     git config user.email "hiteshkuberr@gmail.com"

    #     # Add an empty commit
    #     git commit --allow-empty -m "Add empty commit to trigger actions"

    #     # Push the changes to the existing branch
    #     git push origin feature-branch
    #   shell: bash

    - name: Turn On PR Auto-Merge
      if: ${{ env.PR_NUMBER }}
      run: |
        gh pr merge --squash --auto --repo ${{ github.repository }} --delete-branch ${{ env.PR_NUMBER }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    # - name: Wait for checks to complete
    #   if: ${{ env.PR_NUMBER }}
    #   run: |
    #     echo "pr number: ${{ env.PR_NUMBER }}"
    #     # Replace 'YOUR-ACCESS-TOKEN' with your actual GitHub access token
    #     ACCESS_TOKEN=${{ inputs.personal-access-token }}
    #     REPO_OWNER="hitesh-temp-account"
    #     REPO_NAME="Breach"
    #     pr_merged=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/${{ env.PR_NUMBER }}" | jq -r '.merged')
    #     echo "status: $pr_merged"

    #     while [ "$pr_merged" != "true" ]; do
    #       sleep 5
          
    #       # Get PR info
    #       PR=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/${{ env.PR_NUMBER }}")
    #       echo "pr: $PR"
    #       pr_merged=$(echo "$PR" | jq -r '.merged')
    #       echo "State of the PR: $pr_merged"
    #     done

    #     if [ "$pr_merged" == "true" ]; then
    #       echo "PR checks passed. Deleting branch."
    #       git push origin --delete new-feature-branch
    #     else
    #       echo "PR checks failed. Keeping the branch."
    #     fi
    #   shell: bash
